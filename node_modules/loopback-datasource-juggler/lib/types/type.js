var util = require('util');

module.exports = Type;

/**
 * The base type
 * @param {Object} options Options for the type
 * @returns {Type}
 * @constructor
 */
function Type(options) {
  if (!(this instanceof Type)) {
    return new Type(options);
  }
  options = options || {};
  if (typeof options === 'function') options = { validate: options };
  if (options.validate) this._validateMethod = options.validate;
  if (options.coerce) this._coerceMethod = options.coerce;
  if (options.base) this._base = options.base;
  this.options = options;
}

/**
 * Check if the value is valid
 * @param {*} val The value
 * @returns {boolean}
 */
Type.prototype.check = function(val) {
  if (this._base && !this._base.check(val)) {
    return false;
  }
  if (this._validateMethod && !this._validateMethod(val)) {
    return false;
  }
  return true;
};

/**
 * Validate if the value and throws error if not valid
 * @param {*} val The value
 * @returns {boolean}
 */
Type.prototype.validate = function(val) {
  if (!this.check(val)) {
    throw new Error(val + ' failed validation.');
  }
  return true;
};

/**
 * Coerce the value into this type
 * @param {*} val The original value
 * @returns {*} The coerced value
 */
Type.prototype.coerce = function(val) {
  val = this.coerceOnly(val);
  this.validate(val);
  return val;
};

/**
 * Coerce the value into this type without validation
 * @param {*} val The original value
 * @returns {*} The coerced value
 */
Type.prototype.coerceOnly = function(val) {
  if (this._base) {
    val = this._base.coerceOnly(val);
  }
  if (this._coerceMethod) {
    val = this._coerceMethod(val);
  }
  return val;
};

/**
 * Create a subtype of this type
 * @param {Object} options Options for the subtype
 * @returns {Type} The sub type
 */
Type.prototype.subtype = function(options) {
  var opts;
  if (typeof options === 'function') {
    opts = { validate: options};
  } else {
    for (var p in options) {
      opts[p] = options[p];
    }
  }
  opts.base = this;
  return new Type(opts);
};

function StringType(options) {
  if (!(this instanceof StringType)) {
    return new StringType(options);
  }
  this.super_.call(this, options);
}

util.inherits(StringType, Type);

